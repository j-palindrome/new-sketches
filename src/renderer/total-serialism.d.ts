/** Declaration file generated by dts-gen */
declare module 'total-serialism' {
  export function getBPM(): any

  export function getRoot(): any

  export function getScale(): any

  export function getSettings(): any

  export function getTempo(): any

  export function setBPM(t: any): any

  export function setRoot(r: any): any

  export function setScale(s: any, r: any): any

  export function setTempo(t: any): any

  export namespace Algorithmic {
    class Automaton {
      constructor(...args: any[])

      binaryToTable(...args: any[]): void

      feed(...args: any[]): void

      next(...args: any[]): void

      rule(...args: any[]): void

      ruleToBinary(...args: any[]): void
    }

    function bigCollatz(n: any): any

    function bigCollatzMod(n: any, m: any): any

    function collatz(n: any): any

    function collatzMod(n: any, m: any): any

    function euclid(steps: any, beats: any, rot: any): any

    function euclidean(steps: any, beats: any, rot: any): any

    function fastEuclid(s: any, h: any, r: any): any

    function fastEuclidean(s: any, h: any, r: any): any

    function fibonacci(len: any, offset: any, toString: any): any

    function hex(hex: any): any

    function hexBeat(hex: any): any

    function infSeries(len: any, seed: any, offset: any): any

    function infinitySeries(len: any, seed: any, offset: any): any

    function linden(axiom: any, iteration: any, rules: any): any

    function lucas(len: any, offset: any, toString: any): any

    function nbonacci(len: any, s1: any, s2: any, t: any, toString: any): any

    function pell(len: any, offset: any, toString: any): any

    function pisano(mod: any, len: any): any

    function pisanoPeriod(mod: any, len: any): any

    function threeFibonacci(len: any, offset: any, toString: any): any
  }

  export namespace Generative {
    function binary(a: any): any

    function binaryBeat(a: any): any

    function cosF(len: any, periods: any, lo: any, hi: any, phase: any): any

    function cosine(len: any, periods: any, lo: any, hi: any, phase: any): any

    function cosineF(len: any, periods: any, lo: any, hi: any, phase: any): any

    function cosineFloat(len: any, periods: any, lo: any, hi: any, phase: any): any

    function fill(args: any): any

    function phasor(len: any, periods: any, lo: any, hi: any, phase: any): any

    function rect(len: any, periods: any, lo: any, hi: any, pulse: any): any

    function rectF(len: any, periods: any, lo: any, hi: any, pulse: any): any

    function rectFloat(len: any, periods: any, lo: any, hi: any, pulse: any): any

    function saw(len: any, periods: any, lo: any, hi: any, phase: any): any

    function sawF(len: any, periods: any, lo: any, hi: any, phase: any): any

    function sawFloat(len: any, periods: any, lo: any, hi: any, phase: any): any

    function sinF(len: any, periods: any, lo: any, hi: any, phase: any): any

    function sine(len: any, periods: any, lo: any, hi: any, phase: any): any

    function sineF(len: any, periods: any, lo: any, hi: any, phase: any): any

    function sineFloat(len: any, periods: any, lo: any, hi: any, phase: any): any

    function space(a: any): any

    function spacing(a: any): any

    function spacingBeat(a: any): any

    function spread(len: any, lo: any, hi: any): any

    function spreadExp(len: any, lo: any, hi: any, exp: any): any

    function spreadExpF(len: any, lo: any, hi: any, exp: any): any

    function spreadExpFloat(len: any, lo: any, hi: any, exp: any): any

    function spreadF(len: any, lo: any, hi: any): any

    function spreadFloat(len: any, lo: any, hi: any): any

    function spreadFloatExp(len: any, lo: any, hi: any, exp: any): any

    function spreadInc(len: any, lo: any, hi: any): any

    function spreadIncExp(len: any, lo: any, hi: any, exp: any): any

    function spreadIncExpF(len: any, lo: any, hi: any, exp: any): any

    function spreadIncF(len: any, lo: any, hi: any): any

    function spreadInclusive(len: any, lo: any, hi: any): any

    function spreadInclusiveExp(len: any, lo: any, hi: any, exp: any): any

    function spreadInclusiveExpFloat(len: any, lo: any, hi: any, exp: any): any

    function spreadInclusiveFloat(len: any, lo: any, hi: any): any

    function spreadInclusiveFloatExp(len: any, lo: any, hi: any, exp: any): any

    function square(len: any, periods: any, lo: any, hi: any, pulse: any): any

    function squareF(len: any, periods: any, lo: any, hi: any, pulse: any): any

    function squareFloat(len: any, periods: any, lo: any, hi: any, pulse: any): any
  }

  export namespace Statistic {
    function average(a: any, d: any): any

    function center(a: any, d: any): any

    function change(a: any, l: any): any

    function common(a: any, d: any): any

    function compare(a1: any, a2: any): any

    function delta(a: any, l: any): any

    function diff(a: any, l: any): any

    function difference(a: any, l: any): any

    function max(a: any): any

    function maximum(a: any): any

    function mean(a: any, d: any): any

    function median(a: any, d: any): any

    function min(a: any): any

    function minimum(a: any): any

    function mode(a: any, d: any): any

    function sort(a: any, d: any): any
  }

  export namespace Stochastic {
    class DeepMarkov {
      constructor(...args: any[])

      chain(...args: any[]): void

      clear(...args: any[]): void

      next(...args: any[]): void

      parse(...args: any[]): void

      randomState(...args: any[]): void

      read(...args: any[]): void

      seed(...args: any[]): void

      state(...args: any[]): void

      stringify(...args: any[]): void

      train(...args: any[]): void
    }

    class DeepMarkovChain {
      constructor(...args: any[])

      chain(...args: any[]): void

      clear(...args: any[]): void

      next(...args: any[]): void

      parse(...args: any[]): void

      randomState(...args: any[]): void

      read(...args: any[]): void

      seed(...args: any[]): void

      state(...args: any[]): void

      stringify(...args: any[]): void

      train(...args: any[]): void
    }

    class MarkovChain {
      constructor(...args: any[])

      chain(...args: any[]): void

      clear(...args: any[]): void

      next(...args: any[]): void

      randomState(...args: any[]): void

      read(...args: any[]): void

      seed(...args: any[]): void

      state(...args: any[]): void

      train(...args: any[]): void
    }

    function choose(len: any, a: any): any

    function clave(len: any, max: any, min: any): any

    function coin(len: any): any

    function dice(len: any, sides: any): any

    function drunk(len: any, step: any, lo: any, hi: any, p: any, bound: any): any

    function drunkF(len: any, step: any, lo: any, hi: any, p: any, bound: any): any

    function drunkFloat(len: any, step: any, lo: any, hi: any, p: any, bound: any): any

    function expand(a: any, l: any): any

    function extrapolate(a: any, l: any): any

    function getSeed(): any

    function pick(len: any, a: any): any

    function random(len: any, lo: any, hi: any): any

    function randomF(len: any, lo: any, hi: any): any

    function randomFloat(len: any, lo: any, hi: any): any

    function scramble(a: any): any

    function seed(v: any): any

    function shuffle(a: any): any

    function toneRow(): any

    function twelveTone(): any

    function urn(len: any, hi: any, lo: any): any

    function walk(len: any, step: any, lo: any, hi: any, p: any, bound: any): any

    function walkFloat(len: any, step: any, lo: any, hi: any, p: any, bound: any): any
  }

  export namespace Transform {
    function clone(a: any, c: any): any

    function combine(arrs: any): any

    function copy(a: any, d: any): any

    function dup(a: any, d: any): any

    function duplicate(a: any, d: any): any

    function every(a: any, bars: any, div: any, pad: any, shift: any): any

    function filter(a: any, f: any): any

    function filterType(a: any, t: any): any

    function flat(a: any, depth: any): any

    function flatten(a: any, depth: any): any

    function invert(a: any, lo: any, hi: any): any

    function join(arrs: any): any

    function lace(arrs: any): any

    function lookup(idx: any, arr: any): any

    function merge(arrs: any): any

    function mirror(arr: any, noDouble: any): any

    function pad(a: any, length: any, pad: any, shift: any): any

    function padding(a: any, length: any, pad: any, shift: any): any

    function palin(arr: any, noDouble: any): any

    function palindrome(arr: any, noDouble: any): any

    function repeat(arr: any, rep: any): any

    function reverse(a: any): any

    function rotate(a: any, r: any): any

    function slice(a: any, s: any, r: any): any

    function sort(a: any, d: any): any

    function split(a: any, s: any): any

    function spray(values: any, beats: any): any

    function step(arrs: any): any

    function stretch(a: any, len: any, mode: any): any

    function tFilter(a: any, t: any): any

    function unique(a: any): any

    function zip(arrs: any): any
  }

  export namespace Translate {
    class Scala {
      constructor(...args: any[])

      center(...args: any[]): void

      chart(...args: any[]): void

      parse(...args: any[]): void

      scalaToFreq(...args: any[]): void

      search(...args: any[]): void

      stof(...args: any[]): void

      tune(...args: any[]): void
    }

    function chords(a: any, n: any): any

    function chordsFromNames(a: any): any

    function chordsFromNumerals(a: any, n: any): any

    function chromaToRelative(c: any): any

    function ctor(c: any): any

    function divisionToMs(a: any, bpm: any): any

    function divisionToRatio(a: any): any

    function divisionToTicks(a: any): any

    function dtoms(a: any, bpm: any): any

    function dtor(a: any): any

    function dtotk(a: any): any

    function freqToMidi(a: any, d: any): any

    function freqToNote(a: any): any

    function ftom(a: any, d: any): any

    function fton(a: any): any

    function getBPM(): any

    function getRoot(): any

    function getScale(): any

    function getScales(): any

    function getSettings(): any

    function getTempo(): any

    function mapToFreq(a: any, o: any): any

    function mapToMidi(a: any, o: any): any

    function mapToScale(a: any, s: any, r: any): any

    function midiToFreq(a: any, t: any, n: any, c: any): any

    function midiToNote(a: any): any

    function mtof(a: any, t: any, n: any, c: any): any

    function mton(a: any): any

    function noteToFreq(a: any): any

    function noteToMidi(a: any): any

    function ntof(a: any): any

    function ntom(a: any): any

    function ratioToCent(a: any): any

    function ratioToMs(a: any, bpm: any): any

    function ratioToTicks(a: any): any

    function relativeToFreq(a: any, o: any): any

    function relativeToMidi(a: any, o: any): any

    function rtoc(a: any): any

    function rtof(a: any, o: any): any

    function rtom(a: any, o: any): any

    function rtoms(a: any, bpm: any): any

    function rtotk(a: any): any

    function scaleNames(): any

    function setBPM(t: any): any

    function setRoot(r: any): any

    function setScale(s: any, r: any): any

    function setTempo(t: any): any

    function textCode(a: any): any

    function textToCode(a: any): any

    function timevalueToMs(a: any, bpm: any): any

    function timevalueToRatio(a: any): any

    function timevalueToTicks(a: any): any

    function toFreq(a: any, o: any): any

    function toMidi(a: any, o: any): any

    function toScale(a: any, s: any, r: any): any

    function ttoc(a: any): any

    function ttoms(a: any, bpm: any): any

    function ttor(a: any): any

    function ttotk(a: any): any
  }

  export namespace Utility {
    const HALF_PI: number

    const PI: number

    const TWO_PI: number

    function add(a: any, v: any): any

    function arrayCalc(a: any, v: any, func: any): any

    function arrayCombinations(arrs: any): any

    function bounce(a: any, lo: any, hi: any): any

    function bound(a: any, lo: any, hi: any): any

    function clamp(a: any, lo: any, hi: any): any

    function clip(a: any, lo: any, hi: any): any

    function constrain(a: any, lo: any, hi: any): any

    function div(a: any, v: any): any

    function divide(a: any, v: any): any

    function draw(a: any, prefs: any): any

    function flat(a: any, depth: any): any

    function flatten(a: any, depth: any): any

    function fold(a: any, lo: any, hi: any): any

    function fromArray(a: any, i: any): any

    function length(a: any): any

    function lerp(a: any, v: any, f: any): any

    function map(a: any, params: any): any

    function max(a: any): any

    function maximum(a: any): any

    function min(a: any): any

    function minimum(a: any): any

    function mix(a: any, v: any, f: any): any

    function mod(a: any, v: any): any

    function mul(a: any, v: any): any

    function mult(a: any, v: any): any

    function multiply(a: any, v: any): any

    function norm(a: any): any

    function normalize(a: any): any

    function plot(a: any, prefs: any): any

    function pow(a: any, v: any): any

    function scale(a: any, params: any): any

    function signedNormalize(a: any): any

    function size(a: any): any

    function snorm(a: any): any

    function sqrt(a: any): any

    function sub(a: any, v: any): any

    function subtract(a: any, v: any): any

    function sum(a: any): any

    function toArray(a: any): any

    function trunc(a: any): any

    function truncate(a: any): any

    function unique(a: any): any

    function wrap(a: any, lo: any, hi: any): any
  }
}
